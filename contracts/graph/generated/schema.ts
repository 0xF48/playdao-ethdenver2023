// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DAO extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DAO entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DAO must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DAO", id.toString(), this);
    }
  }

  static load(id: string): DAO | null {
    return changetype<DAO | null>(store.get("DAO", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoID(): BigInt {
    let value = this.get("daoID");
    return value!.toBigInt();
  }

  set daoID(value: BigInt) {
    this.set("daoID", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    return value!.toString();
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }

  get badgeContract(): Bytes {
    let value = this.get("badgeContract");
    return value!.toBytes();
  }

  set badgeContract(value: Bytes) {
    this.set("badgeContract", Value.fromBytes(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    return value!.toBigInt();
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdBlockHash(): Bytes {
    let value = this.get("createdBlockHash");
    return value!.toBytes();
  }

  set createdBlockHash(value: Bytes) {
    this.set("createdBlockHash", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTransactionHash(): Bytes {
    let value = this.get("createdTransactionHash");
    return value!.toBytes();
  }

  set createdTransactionHash(value: Bytes) {
    this.set("createdTransactionHash", Value.fromBytes(value));
  }

  get badgeTypes(): Array<string> {
    let value = this.get("badgeTypes");
    return value!.toStringArray();
  }

  set badgeTypes(value: Array<string>) {
    this.set("badgeTypes", Value.fromStringArray(value));
  }

  get questTypes(): Array<string> {
    let value = this.get("questTypes");
    return value!.toStringArray();
  }

  set questTypes(value: Array<string>) {
    this.set("questTypes", Value.fromStringArray(value));
  }

  get quests(): Array<string> {
    let value = this.get("quests");
    return value!.toStringArray();
  }

  set quests(value: Array<string>) {
    this.set("quests", Value.fromStringArray(value));
  }

  get stakes(): Array<string> {
    let value = this.get("stakes");
    return value!.toStringArray();
  }

  set stakes(value: Array<string>) {
    this.set("stakes", Value.fromStringArray(value));
  }
}

export class BadgeType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BadgeType entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BadgeType must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BadgeType", id.toString(), this);
    }
  }

  static load(id: string): BadgeType | null {
    return changetype<BadgeType | null>(store.get("BadgeType", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoID(): BigInt {
    let value = this.get("daoID");
    return value!.toBigInt();
  }

  set daoID(value: BigInt) {
    this.set("daoID", Value.fromBigInt(value));
  }

  get badgeTypeID(): BigInt {
    let value = this.get("badgeTypeID");
    return value!.toBigInt();
  }

  set badgeTypeID(value: BigInt) {
    this.set("badgeTypeID", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    return value!.toString();
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdBlockHash(): Bytes {
    let value = this.get("createdBlockHash");
    return value!.toBytes();
  }

  set createdBlockHash(value: Bytes) {
    this.set("createdBlockHash", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTransactionHash(): Bytes {
    let value = this.get("createdTransactionHash");
    return value!.toBytes();
  }

  set createdTransactionHash(value: Bytes) {
    this.set("createdTransactionHash", Value.fromBytes(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }
}

export class QuestType extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestType entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestType must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestType", id.toString(), this);
    }
  }

  static load(id: string): QuestType | null {
    return changetype<QuestType | null>(store.get("QuestType", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoID(): BigInt {
    let value = this.get("daoID");
    return value!.toBigInt();
  }

  set daoID(value: BigInt) {
    this.set("daoID", Value.fromBigInt(value));
  }

  get questTypeID(): BigInt {
    let value = this.get("questTypeID");
    return value!.toBigInt();
  }

  set questTypeID(value: BigInt) {
    this.set("questTypeID", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    return value!.toString();
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }

  get contributorBadgeTypeID(): BigInt {
    let value = this.get("contributorBadgeTypeID");
    return value!.toBigInt();
  }

  set contributorBadgeTypeID(value: BigInt) {
    this.set("contributorBadgeTypeID", Value.fromBigInt(value));
  }

  get verifierBadgeTypeID(): BigInt {
    let value = this.get("verifierBadgeTypeID");
    return value!.toBigInt();
  }

  set verifierBadgeTypeID(value: BigInt) {
    this.set("verifierBadgeTypeID", Value.fromBigInt(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdBlockHash(): Bytes {
    let value = this.get("createdBlockHash");
    return value!.toBytes();
  }

  set createdBlockHash(value: Bytes) {
    this.set("createdBlockHash", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTransactionHash(): Bytes {
    let value = this.get("createdTransactionHash");
    return value!.toBytes();
  }

  set createdTransactionHash(value: Bytes) {
    this.set("createdTransactionHash", Value.fromBytes(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get contributorBadge(): string {
    let value = this.get("contributorBadge");
    return value!.toString();
  }

  set contributorBadge(value: string) {
    this.set("contributorBadge", Value.fromString(value));
  }

  get verifierBadge(): string {
    let value = this.get("verifierBadge");
    return value!.toString();
  }

  set verifierBadge(value: string) {
    this.set("verifierBadge", Value.fromString(value));
  }

  get starterDeps(): Array<string> {
    let value = this.get("starterDeps");
    return value!.toStringArray();
  }

  set starterDeps(value: Array<string>) {
    this.set("starterDeps", Value.fromStringArray(value));
  }

  get contributorDeps(): Array<string> {
    let value = this.get("contributorDeps");
    return value!.toStringArray();
  }

  set contributorDeps(value: Array<string>) {
    this.set("contributorDeps", Value.fromStringArray(value));
  }

  get verifierDeps(): Array<string> {
    let value = this.get("verifierDeps");
    return value!.toStringArray();
  }

  set verifierDeps(value: Array<string>) {
    this.set("verifierDeps", Value.fromStringArray(value));
  }

  get quests(): Array<string> {
    let value = this.get("quests");
    return value!.toStringArray();
  }

  set quests(value: Array<string>) {
    this.set("quests", Value.fromStringArray(value));
  }
}

export class QuestTypeStarterDep extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestTypeStarterDep entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestTypeStarterDep must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestTypeStarterDep", id.toString(), this);
    }
  }

  static load(id: string): QuestTypeStarterDep | null {
    return changetype<QuestTypeStarterDep | null>(
      store.get("QuestTypeStarterDep", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questType(): string {
    let value = this.get("questType");
    return value!.toString();
  }

  set questType(value: string) {
    this.set("questType", Value.fromString(value));
  }

  get badgeType(): string {
    let value = this.get("badgeType");
    return value!.toString();
  }

  set badgeType(value: string) {
    this.set("badgeType", Value.fromString(value));
  }
}

export class QuestTypeContributorDep extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save QuestTypeContributorDep entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestTypeContributorDep must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestTypeContributorDep", id.toString(), this);
    }
  }

  static load(id: string): QuestTypeContributorDep | null {
    return changetype<QuestTypeContributorDep | null>(
      store.get("QuestTypeContributorDep", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questType(): string {
    let value = this.get("questType");
    return value!.toString();
  }

  set questType(value: string) {
    this.set("questType", Value.fromString(value));
  }

  get badgeType(): string {
    let value = this.get("badgeType");
    return value!.toString();
  }

  set badgeType(value: string) {
    this.set("badgeType", Value.fromString(value));
  }
}

export class QuestTypeVerifierDep extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestTypeVerifierDep entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestTypeVerifierDep must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("QuestTypeVerifierDep", id.toString(), this);
    }
  }

  static load(id: string): QuestTypeVerifierDep | null {
    return changetype<QuestTypeVerifierDep | null>(
      store.get("QuestTypeVerifierDep", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questType(): string {
    let value = this.get("questType");
    return value!.toString();
  }

  set questType(value: string) {
    this.set("questType", Value.fromString(value));
  }

  get badgeType(): string {
    let value = this.get("badgeType");
    return value!.toString();
  }

  set badgeType(value: string) {
    this.set("badgeType", Value.fromString(value));
  }
}

export class Quest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Quest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Quest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Quest", id.toString(), this);
    }
  }

  static load(id: string): Quest | null {
    return changetype<Quest | null>(store.get("Quest", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoID(): BigInt {
    let value = this.get("daoID");
    return value!.toBigInt();
  }

  set daoID(value: BigInt) {
    this.set("daoID", Value.fromBigInt(value));
  }

  get questTypeID(): BigInt {
    let value = this.get("questTypeID");
    return value!.toBigInt();
  }

  set questTypeID(value: BigInt) {
    this.set("questTypeID", Value.fromBigInt(value));
  }

  get questID(): BigInt {
    let value = this.get("questID");
    return value!.toBigInt();
  }

  set questID(value: BigInt) {
    this.set("questID", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    return value!.toString();
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }

  get limitContributions(): BigInt {
    let value = this.get("limitContributions");
    return value!.toBigInt();
  }

  set limitContributions(value: BigInt) {
    this.set("limitContributions", Value.fromBigInt(value));
  }

  get numOnGoings(): BigInt {
    let value = this.get("numOnGoings");
    return value!.toBigInt();
  }

  set numOnGoings(value: BigInt) {
    this.set("numOnGoings", Value.fromBigInt(value));
  }

  get numCompleted(): BigInt {
    let value = this.get("numCompleted");
    return value!.toBigInt();
  }

  set numCompleted(value: BigInt) {
    this.set("numCompleted", Value.fromBigInt(value));
  }

  get numCanceled(): BigInt {
    let value = this.get("numCanceled");
    return value!.toBigInt();
  }

  set numCanceled(value: BigInt) {
    this.set("numCanceled", Value.fromBigInt(value));
  }

  get requiredStake(): BigInt {
    let value = this.get("requiredStake");
    return value!.toBigInt();
  }

  set requiredStake(value: BigInt) {
    this.set("requiredStake", Value.fromBigInt(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdBlockHash(): Bytes {
    let value = this.get("createdBlockHash");
    return value!.toBytes();
  }

  set createdBlockHash(value: Bytes) {
    this.set("createdBlockHash", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTransactionHash(): Bytes {
    let value = this.get("createdTransactionHash");
    return value!.toBytes();
  }

  set createdTransactionHash(value: Bytes) {
    this.set("createdTransactionHash", Value.fromBytes(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }

  get questType(): string {
    let value = this.get("questType");
    return value!.toString();
  }

  set questType(value: string) {
    this.set("questType", Value.fromString(value));
  }

  get claims(): Array<string> {
    let value = this.get("claims");
    return value!.toStringArray();
  }

  set claims(value: Array<string>) {
    this.set("claims", Value.fromStringArray(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Claim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Claim", id.toString(), this);
    }
  }

  static load(id: string): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoID(): BigInt {
    let value = this.get("daoID");
    return value!.toBigInt();
  }

  set daoID(value: BigInt) {
    this.set("daoID", Value.fromBigInt(value));
  }

  get questTypeID(): BigInt {
    let value = this.get("questTypeID");
    return value!.toBigInt();
  }

  set questTypeID(value: BigInt) {
    this.set("questTypeID", Value.fromBigInt(value));
  }

  get questID(): BigInt {
    let value = this.get("questID");
    return value!.toBigInt();
  }

  set questID(value: BigInt) {
    this.set("questID", Value.fromBigInt(value));
  }

  get claimID(): BigInt {
    let value = this.get("claimID");
    return value!.toBigInt();
  }

  set claimID(value: BigInt) {
    this.set("claimID", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get claimedBy(): Bytes {
    let value = this.get("claimedBy");
    return value!.toBytes();
  }

  set claimedBy(value: Bytes) {
    this.set("claimedBy", Value.fromBytes(value));
  }

  get verifiedBy(): Bytes | null {
    let value = this.get("verifiedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set verifiedBy(value: Bytes | null) {
    if (!value) {
      this.unset("verifiedBy");
    } else {
      this.set("verifiedBy", Value.fromBytes(<Bytes>value));
    }
  }

  get proofMetadataURI(): string | null {
    let value = this.get("proofMetadataURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofMetadataURI(value: string | null) {
    if (!value) {
      this.unset("proofMetadataURI");
    } else {
      this.set("proofMetadataURI", Value.fromString(<string>value));
    }
  }

  get claimedBlock(): BigInt {
    let value = this.get("claimedBlock");
    return value!.toBigInt();
  }

  set claimedBlock(value: BigInt) {
    this.set("claimedBlock", Value.fromBigInt(value));
  }

  get claimedBlockHash(): Bytes {
    let value = this.get("claimedBlockHash");
    return value!.toBytes();
  }

  set claimedBlockHash(value: Bytes) {
    this.set("claimedBlockHash", Value.fromBytes(value));
  }

  get claimedTimestamp(): BigInt {
    let value = this.get("claimedTimestamp");
    return value!.toBigInt();
  }

  set claimedTimestamp(value: BigInt) {
    this.set("claimedTimestamp", Value.fromBigInt(value));
  }

  get claimedTransactionHash(): Bytes {
    let value = this.get("claimedTransactionHash");
    return value!.toBytes();
  }

  set claimedTransactionHash(value: Bytes) {
    this.set("claimedTransactionHash", Value.fromBytes(value));
  }

  get canceledBy(): Bytes | null {
    let value = this.get("canceledBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set canceledBy(value: Bytes | null) {
    if (!value) {
      this.unset("canceledBy");
    } else {
      this.set("canceledBy", Value.fromBytes(<Bytes>value));
    }
  }

  get canceledBlock(): BigInt | null {
    let value = this.get("canceledBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledBlock(value: BigInt | null) {
    if (!value) {
      this.unset("canceledBlock");
    } else {
      this.set("canceledBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledBlockHash(): Bytes | null {
    let value = this.get("canceledBlockHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set canceledBlockHash(value: Bytes | null) {
    if (!value) {
      this.unset("canceledBlockHash");
    } else {
      this.set("canceledBlockHash", Value.fromBytes(<Bytes>value));
    }
  }

  get canceledTimestamp(): BigInt | null {
    let value = this.get("canceledTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("canceledTimestamp");
    } else {
      this.set("canceledTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledTransactionHash(): Bytes | null {
    let value = this.get("canceledTransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set canceledTransactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("canceledTransactionHash");
    } else {
      this.set("canceledTransactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get completedBlock(): BigInt | null {
    let value = this.get("completedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set completedBlock(value: BigInt | null) {
    if (!value) {
      this.unset("completedBlock");
    } else {
      this.set("completedBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get completedBlockHash(): Bytes | null {
    let value = this.get("completedBlockHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set completedBlockHash(value: Bytes | null) {
    if (!value) {
      this.unset("completedBlockHash");
    } else {
      this.set("completedBlockHash", Value.fromBytes(<Bytes>value));
    }
  }

  get completedTimestamp(): BigInt | null {
    let value = this.get("completedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set completedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("completedTimestamp");
    } else {
      this.set("completedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get completedTransactionHash(): Bytes | null {
    let value = this.get("completedTransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set completedTransactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("completedTransactionHash");
    } else {
      this.set("completedTransactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdBlockHash(): Bytes {
    let value = this.get("createdBlockHash");
    return value!.toBytes();
  }

  set createdBlockHash(value: Bytes) {
    this.set("createdBlockHash", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdTransactionHash(): Bytes {
    let value = this.get("createdTransactionHash");
    return value!.toBytes();
  }

  set createdTransactionHash(value: Bytes) {
    this.set("createdTransactionHash", Value.fromBytes(value));
  }

  get updatedBy(): Bytes {
    let value = this.get("updatedBy");
    return value!.toBytes();
  }

  set updatedBy(value: Bytes) {
    this.set("updatedBy", Value.fromBytes(value));
  }

  get updatedBlock(): BigInt {
    let value = this.get("updatedBlock");
    return value!.toBigInt();
  }

  set updatedBlock(value: BigInt) {
    this.set("updatedBlock", Value.fromBigInt(value));
  }

  get updatedBlockHash(): Bytes {
    let value = this.get("updatedBlockHash");
    return value!.toBytes();
  }

  set updatedBlockHash(value: Bytes) {
    this.set("updatedBlockHash", Value.fromBytes(value));
  }

  get updatedTimestamp(): BigInt {
    let value = this.get("updatedTimestamp");
    return value!.toBigInt();
  }

  set updatedTimestamp(value: BigInt) {
    this.set("updatedTimestamp", Value.fromBigInt(value));
  }

  get updatedTransactionHash(): Bytes {
    let value = this.get("updatedTransactionHash");
    return value!.toBytes();
  }

  set updatedTransactionHash(value: Bytes) {
    this.set("updatedTransactionHash", Value.fromBytes(value));
  }

  get quest(): string {
    let value = this.get("quest");
    return value!.toString();
  }

  set quest(value: string) {
    this.set("quest", Value.fromString(value));
  }
}

export class UserDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserDeposit", id.toString(), this);
    }
  }

  static load(id: string): UserDeposit | null {
    return changetype<UserDeposit | null>(store.get("UserDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class UserStake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserStake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserStake must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserStake", id.toString(), this);
    }
  }

  static load(id: string): UserStake | null {
    return changetype<UserStake | null>(store.get("UserStake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoID(): BigInt {
    let value = this.get("daoID");
    return value!.toBigInt();
  }

  set daoID(value: BigInt) {
    this.set("daoID", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get dao(): string {
    let value = this.get("dao");
    return value!.toString();
  }

  set dao(value: string) {
    this.set("dao", Value.fromString(value));
  }
}
